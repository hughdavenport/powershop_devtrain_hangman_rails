require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GuessesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Guess. As you add validations to Guess, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { guess: 'a' }
  }

  let(:invalid_attributes) {
    { guess: nil }
  }

  let(:word) { "hangman" }
  let(:game) { Game.create(word: word) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GuessesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "redirects to the game" do
      get :index, {:game_id => game}, valid_session
      expect(response).to redirect_to(game)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Guess" do
        expect {
          post :create, {:game_id => game, :guess => valid_attributes}, valid_session
        }.to change(Guess, :count).by(1)
      end

      it "doesn't assign any errors to @errors" do
        post :create, {:game_id => game, :guess => valid_attributes}, valid_session
        expect(assigns(:errors)).to be nil
      end

      it "redirects to the game" do
        post :create, {:game_id => game, :guess => valid_attributes}, valid_session
        expect(response).to redirect_to(game)
      end
    end

    context "with invalid params" do
      it "assigns errors to @errors" do
        post :create, {:game_id => game, :guess => invalid_attributes}, valid_session
        expect(assigns(:errors)).not_to be_empty
      end

      it "re-renders the 'games/show' template" do
        post :create, {:game_id => game, :guess => invalid_attributes}, valid_session
        expect(response).to render_template("games/show")
      end
    end
  end
end
